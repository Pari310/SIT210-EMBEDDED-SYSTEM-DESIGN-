// BH1750FVI - Version: Latest 

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/369adaf7-ab5d-48fe-b22e-9da32c5afd67 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float intensity;
  bool light;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
#include <BH1750FVI.h>
#include "thingProperties.h"
#include <WiFiNINA.h>
#include <Wire.h>


BH1750FVI LightSensor(BH1750FVI::k_DevModeContLowRes);

char ssid[] = SECRET_SSID;                // your network SSID (name)
char pass[] = SECRET_PASS;                // your network password (use for WPA, or use as key for WEP)

WiFiClient client;

char   HOST_NAME[] = "maker.ifttt.com";
String PATH_NAME1   = "/trigger/sunlight_present/with/key/eK9JrzYkkmJeYDci9okp7DJatKmoiOsjJTnTHg3MI02"; // change your EVENT-NAME and YOUR-KEY
String PATH_NAME2  = "/trigger/sunlight_absent/with/key/eK9JrzYkkmJeYDci9okp7DJatKmoiOsjJTnTHg3MI02"; // change your EVENT-NAME and YOUR-KEY
String queryString = "?value1=57&value2=25";

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  LightSensor.begin();
  Wire.begin();
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
     */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void sunlight()
{
  if (client.connect(HOST_NAME, 80)) {
    Serial.println("Connected to server");
  }
  else {
    Serial.println("Connection Failed");
  }

  client.println("GET " + PATH_NAME1 + queryString + " HTTP/1.1");
  client.println("Host: " + String(HOST_NAME));
  client.println("Connection: close");
  client.println();

  while (client.connected()) {
    if (client.available()) {
      char c = client.read();
      Serial.print(c);
    }
  }

  client.stop();
  Serial.println();
  Serial.println("disconnected");
}

void shade()
{
  if (client.connect(HOST_NAME, 80)) {
    Serial.println("Connected to server");
  }
  else {
    Serial.println("Connection Failed");
  }

  client.println("GET " + PATH_NAME2 + queryString + " HTTP/1.1");
  client.println("Host: " + String(HOST_NAME));
  client.println("Connection: close");
  client.println();

  while (client.connected()) {
    if (client.available()) {
      char c = client.read();
      Serial.print(c);
    }
  }

  client.stop();
  Serial.println();
  Serial.println("disconnected");
}

void loop() {
  ArduinoCloud.update();
  intensity=LightSensor.GetLightIntensity();
  Serial.print("Light: ");
  Serial.println(intensity);
  delay(250);
  if (intensity < 600)
  {
    light = 1;
    shade();
  }
  else if (intensity > 600)
  {
    light = 0;
    sunlight();
  }
}
